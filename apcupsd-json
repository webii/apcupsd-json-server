#!/usr/bin/python
"""
Alex Lindeman
2017-08-05
Provides a JSON API to apcupsd.
"""

import json, os, socket
from argparse import ArgumentParser
from http.server import SimpleHTTPRequestHandler
from socketserver import TCPServer
from struct import pack

argparser = ArgumentParser(prog="apcupsd-json-server", description="JSON proxy and aggregator for apcupsd")
argparser.add_argument("-l", "--listen", default="0.0.0.0", help="Server bind address")
argparser.add_argument("-p", "--port", type=int, default=8008, help="Server port")
argparser.add_argument("--cors", default="*", help="Add CORS header")
argparser.add_argument("watch", nargs="*", default=[3551], help="Hosts/port(s) apcupsd is running on")
args = argparser.parse_args()

def ups_read(ups):
  data = ""
  s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  s.connect(ups)
  s.send(pack("xb6s", 6, "status".encode('utf-8')))
  while True:
    data += s.recv(256).decode('utf-8')
    if data.endswith("\n\x00\x00"): break
  s.close()
  return data

def ups_format(raw):
  metrics = {}
  for line in raw.lstrip("\x00\x18").rstrip("\n\x00\x00").split("\n\x00"):
    key, value = [i.strip() for i in line.split(':', 1)]
    metrics[key[1:].lower()] = value
  return metrics

def fetch_ups_data():
  upses = []

  for w in args.watch:
    if type(w) is str and ":" in w:
      h, p = w.split(":")
      sock = (h, int(p))
    else:
      sock = ("127.0.0.1", int(w))

    try:
      data = ups_read(sock)
    except socket.error as err:
      print("caught exception from apcupsd: %s" % err)
      raise RuntimeError("couldn't read data on port %s: %s" % (w, err))

    try:
      formatted = ups_format(data)
      upses.append(formatted)
    except (AttributeError, KeyError, ValueError) as err:
      print("caught exception from format: %s" % err)
      raise(RuntimeError, "couldn't format response from apcupsd: %s" % err)

  return {
    "status": u"\ud83d\udc4d",
    "upses": upses
  }

class RequestHandler(SimpleHTTPRequestHandler):
  def do_GET(self):
    response = None
    try:
      if self.path != "/": raise ValueError("not a valid endpoint")
      response = fetch_ups_data()
      self.send_response(200)
    except (ValueError, RuntimeError) as err:
      codes = {
        "ValueError": 404,
        "RuntimeError": 500
      }
      self.send_response(codes[type(err).__name__])
      response = {
        "status": u"\ud83d\udc4e",
        "error": "%s" % err
      }
    finally:
      self.send_header("Content-Type", "application/json; charset=utf-8")
      if args.cors:
        self.send_header("Access-Control-Allow-Origin", args.cors)
      self.end_headers()
      self.wfile.write(json.dumps(response).encode('utf-8'))

handler = RequestHandler
httpd = TCPServer((args.listen, args.port), handler)

try:
  print("listening on %s:%s\nwatching upses running on port %s" % (args.listen, args.port, args.watch))
  httpd.serve_forever()
finally:
  print("cleaning up")
  httpd.server_close()
